function code2file(F,fname)
% writes code in char form to an m-file, which could be a function if
% out_names and/or in_names are given

% see also online_function_evaluator

% code=struct('code',code,'argins',{{'y','x','ss','param','def'}},'argouts',{{'Jac'}})
Default=struct('code','char','argins','char or cellstr','argouts','char or cellstr');
if nargin==0
    disp(Default)
    return
end
if nargin<2
    fname=[];
end

if isempty(fname)
    fname=tempname;
    loc=find(fname==filesep);
    fname=fname(loc(end)+1:end);
end

if exist([fname,'.m'],'file')
    delete([fname,'.m'])
end
MajorFields=fieldnames(Default);
for ifield=1:numel(MajorFields)
    thisfield=MajorFields{ifield};
    if isfield(F,thisfield)
        Default.(thisfield)=F.(thisfield);
        F=rmfield(F,thisfield);
    else
        Default.(thisfield)='';
    end
end
remaining_fields=fieldnames(F);
if ~isempty(remaining_fields)
    disp(remaining_fields)
    error('these fields are not recognized')
end

if isempty(Default.code)
    error('must have code')
end
in_names=Default.argins(:)';
out_names=Default.argouts(:)';
code=Default.code;

zero_nargout=isempty(out_names);
zero_nargin=isempty(in_names);

check_inputs()

code=regexp(code,';','split');

the_dot=find(fname=='.');
if ~isempty(the_dot)
    fname=fname(1:the_dot-1);
end

function_flag=~zero_nargout||~zero_nargin;

fid=fopen([fname,'.m'],'w');
fprintf(fid,'%s\n\n',['%% Code automagically generated by rise on ',datestr(now)]);
if function_flag
    args_in='';
    args_out='';
    if ~zero_nargin
        args_in=cell2mat(strcat(in_names,','));
        args_in=args_in(1:end-1);
    end
    if ~zero_nargout
        args_out=cell2mat(strcat(out_names,','));
        args_out=args_out(1:end-1);
    end
    fprintf(fid,'%s\n\n',['function [',args_out,']=',fname,'(',args_in,')']);
end
for icod=1:numel(code)
    if ~isempty(code{icod})
        fprintf(fid,'%s\n',[code{icod},';']);
    end
end
fclose(fid);
% make the function readily available for use if necessary
rehash()

    function check_inputs()
        if ~zero_nargout
            if ischar(out_names)
                out_names=cellstr(out_names);
            end
        end
        if ~zero_nargin
            if ischar(in_names)
                in_names=cellstr(in_names);
            end
        end
        if ~ischar(code)
            error('code should be char')
        end
        
    end

end