function pdata=prior_plots(obj,varargin)
% prior_plots -- computes prior densities for estimated parameters
%
% Syntax
% -------
% ::
%
%   ppdata=prior_plots(obj)
%
%   ppdata=posterior_plots(obj,varargin)
%
% Inputs
% -------
%
% - **obj** [rise|dsge|rfvar|svar]: model object
%
% - **varargin** [pairwise arguments]: usual arguments of RISE
%
% Outputs
% --------
%
% - **pdata** [struct]: optional output argument, pdata is a structure
% containing the information needed to plot the prior densities. The user
% can always plot those using utils.plot.prior_posterior(ppdata.(pname)),
% where pname is the name of one particular parameter of interest. 
%
% More About
% ------------
%
% - if there are no output arguments, figures with prior densities are
% plotted, but not saved!!!. 
%
% Examples
% ---------
%
% See also: utils.plot.prior_posterior


if isempty(obj)
	% For the computation of check plots, priors and posteriors
    pdata=struct('prior_discretize',20);
    return
end
if nargout
    pdata=0;
end

obj=set(obj,varargin{:});

nobj=numel(obj);

if nobj>1
    retcode_=cell(1,nobj);
    for iobj=1:nobj
        if nargout
            retcode_{iobj}=prior_plots(obj(iobj));
        else
            prior_plots(obj(iobj));
        end
    end
    if nargout
        pdata=recode_;
    end
    return
end

%----------------------------------------
[prior_dens,~,vnames]=compute_prior_densities(obj);

if nargout
    pdata=prior_dens;
else
    % plot the data
    %--------------
    r0=obj.options.graphics(1);
    c0=obj.options.graphics(2);
    titel='priors and posterior marginal densities';
    
    utils.plot.multiple(@(xname)plotfunc(xname,prior_dens),...
        vnames,titel,r0,c0,...
        'FontSize',11,'FontWeight','normal');
end

end

function [tex_name,legend_]=plotfunc(pname,ppdata)
% the caller may use the tex_name information to override the title...
[~,legend_,tex_name]=utils.plot.prior_posterior(ppdata.(pname),'LineWidth',2.5);
end
